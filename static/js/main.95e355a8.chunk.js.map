{"version":3,"sources":["api/users.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","api/todos.ts","index.tsx"],"names":["id","name","username","email","UserInfo","user","className","href","TodoInfo","todo","title","completed","classNames","TodoList","todos","map","getUserById","userId","usersFromServer","find","todosFormat","App","useState","setTitle","userInfo","setUserInfo","setTodos","error","setError","errorUser","setErrorUser","action","method","onSubmit","event","preventDefault","idUsers","person","largestId","Math","max","Number","trim","prev","addedTodo","htmlFor","type","placeholder","value","onChange","currentTarget","disabled","selected","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.95e355a8.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import { User } from '../../types/User';\n\ntype Props = {\n  user: User | null;\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }:any) => {\n  const { name, email } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { UserInfo } from '../UserInfo';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const {\n    id,\n    title,\n    user,\n    completed,\n  } = todo;\n\n  return (\n    <article\n      data-id={id}\n      className={classNames('TodoInfo', { 'TodoInfo--completed': completed })}\n    >\n      <h2 className=\"TodoInfo__title\">{title}</h2>\n\n      <UserInfo user={user} />\n    </article>\n  );\n};\n","import { Todo } from '../../types/Todo';\nimport { TodoInfo } from '../TodoInfo';\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n\n      {todos.map(todo => <TodoInfo todo={todo} />)}\n\n    </section>\n  );\n};\n","import './App.scss';\n\nimport { useState } from 'react';\nimport usersFromServer from './api/users';\nimport { TodoList } from './components/TodoList';\nimport todosFromServer from './api/todos';\n\nconst getUserById = (userId:number) => {\n  return usersFromServer.find((user) => userId === user.id);\n};\n\nconst todosFormat = todosFromServer.map((todo) => {\n  return {\n    ...todo,\n    user: getUserById(todo.userId) || null,\n  };\n});\n\nexport const App: React.FC = () => {\n  const [title, setTitle] = useState('');\n  const [userInfo, setUserInfo] = useState('');\n  const [todos, setTodos] = useState(todosFormat);\n  const [error, setError] = useState(false);\n  const [errorUser, setErrorUser] = useState(false);\n\n  const handleChangeTitle = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setError(false);\n    setTitle(event.currentTarget.value);\n  };\n\n  const handleChangeName = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setErrorUser(false);\n    setUserInfo(event.currentTarget.value);\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    const idUsers = [...todos].map((person) => person.id);\n    const largestId = Math.max(...idUsers);\n\n    const user = getUserById(Number(userInfo));\n\n    if (title.trim() === '') {\n      setError(true);\n    }\n\n    if (userInfo === '') {\n      setErrorUser(true);\n    }\n\n    if (!(title === '' || userInfo === '')) {\n      setTodos((prev): any => {\n        const addedTodo = {\n          id: largestId + 1,\n          title,\n          completed: false,\n          userId: user ? user.id : null,\n          user,\n        };\n\n        setTitle('');\n        setUserInfo('');\n\n        return [...prev, addedTodo];\n      });\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form action=\"/api/users\" method=\"POST\" onSubmit={handleSubmit}>\n        <div className=\"field\">\n          <label htmlFor=\"\">\n            {'Title: '}\n            <input\n              type=\"text\"\n              data-cy=\"titleInput\"\n              placeholder=\"Enter a title\"\n              value={title}\n              onChange={handleChangeTitle}\n            />\n          </label>\n          {error && <span className=\"error\">Please enter a title</span>}\n        </div>\n\n        <div className=\"field\">\n          <label htmlFor=\"\">\n            {'User: '}\n            <select\n              data-cy=\"userSelect\"\n              onChange={handleChangeName}\n              value={userInfo}\n            >\n              <option value=\"\" disabled selected>\n                Choose a user\n              </option>\n              {usersFromServer.map((user) => (\n                <option value={user.id}>{user.name}</option>\n              ))}\n            </select>\n          </label>\n\n          {errorUser && <span className=\"error\">Please choose a user</span>}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}